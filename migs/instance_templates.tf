### Terraform snippets for MIGs - instance template edition
#
# The snippets below are based on the Creating Instance Templates doc at
# https://cloud.google.com/compute/docs/instance-templates/create-instance-templates
#
# Note that the Terraform provider does not currently support creating a
# template based on existing instances or templates, nor does it support
# templates with container images. Those sections of the doc are skipped below.

### Snippet #1: gcloud with no args
#
# this is equivalent to what you get when you run gcloud with no args:
#
#     $ gcloud compute instance-templates create gcloud-no-args
#
# Important to note that the network tier and SA scopes are silently configured
# by gcloud with no indication in the docs that it's happening, which is an
# annoying surprise for the terraform user trying to reverse-engineer an
# equivalent config.
#
# Another important note is that the presence of the `access_config` block will
# also result in instances being assigned ephemeral public IPs.

resource "google_compute_instance_template" "gcloud_no_args" {
  name         = "gcloud-no-args"
  machine_type = "n1-standard-1"

  disk {
    source_image = "debian-cloud/debian-10"
  }

  network_interface {
    network = "default"

    # secret default
    access_config {
      network_tier = "PREMIUM"
    }
  }

  # secret default
  service_account {
    scopes = [
      "https://www.googleapis.com/auth/devstorage.read_only",
      "https://www.googleapis.com/auth/logging.write",
      "https://www.googleapis.com/auth/monitoring.write",
      "https://www.googleapis.com/auth/pubsub",
      "https://www.googleapis.com/auth/service.management.readonly",
      "https://www.googleapis.com/auth/servicecontrol",
      "https://www.googleapis.com/auth/trace.append",
    ]
  }
}

### Snippet #2: gcloud with explicit config
#
# this is equivalent to what you get when you run the explicit example from the
# docs:
#
#     $ gcloud compute instance-templates create example-template-custom \
#         --machine-type e2-standard-4 \
#         --image-family debian-9 \
#         --image-project debian-cloud \
#         --boot-disk-size 250GB
#
# As before, we must specify the network tier and SA scopes in order to create
# an equivalent template

resource "google_compute_instance_template" "gcloud_with_args" {
  name         = "example-template-custom"
  machine_type = "e2-standard-4"

  disk {
    source_image = "debian-cloud/debian-9"
    disk_size_gb = 250
  }

  network_interface {
    network = "default"

    # secret default
    access_config {
      network_tier = "PREMIUM"
    }
  }

  # secret default
  service_account {
    scopes = [
      "https://www.googleapis.com/auth/devstorage.read_only",
      "https://www.googleapis.com/auth/logging.write",
      "https://www.googleapis.com/auth/monitoring.write",
      "https://www.googleapis.com/auth/pubsub",
      "https://www.googleapis.com/auth/service.management.readonly",
      "https://www.googleapis.com/auth/servicecontrol",
      "https://www.googleapis.com/auth/trace.append",
    ]
  }
}

### Snippet #3: a minimal example

# this is a minimal example using only the attributes that are required by the
# provider. It's given here to illustrate how terraform requires you to be much
# more explicit than gcloud.
#
# The result of this snippet is a template that's mostly the same as the "gcloud
# with no args" example, with a few notable differences:
#
#  * template name will be generated by terraform (`terraform-<high res timestamp>`)
#  * instances created will have:
#    * no external IP
#    * no assigned service account
#    * ... and therefore no scopes

resource "google_compute_instance_template" "minimal" {
  machine_type = "n1-standard-1"

  disk {
    source_image = "debian-cloud/debian-10"
  }

  network_interface {
    network = "default"
  }
}

### Snippet #4: adding disks
#
# The docs say "You can add up to 15 secondary non-boot disks." Here's an
# example that shows all the ways you can do that in terraform, building off the
# minimal snippet for brevity's sake

# first, we create a google_compute_disk that we can attach later. this creates
# a 500gb pd-standard in us-central1-a
resource "google_compute_disk" "disk" {
  name = "basic-disk"
}

# then we create an image from that disk. in reality you'd probably to actually
# have some data on this disk, but this is just an example.
resource "google_compute_image" "img" {
  name        = "example-image"
  source_disk = google_compute_disk.disk.name
}

resource "google_compute_instance_template" "extra_disks" {
  name         = "extra-disks"
  machine_type = "n1-standard-1"

  # you add more disks by specifying additional `disk` blocks. it's important to
  # note that these blocks are positional; if you rearrange them it will cause
  # terraform to delete/recreate the template
  #
  # I've specified `disk_name` here for my own convenience as I'm working with
  # this snippet but it's not a required argument

  # the first disk specified is the boot disk. in this case we're making a copy
  # of the official debian-10 image.
  #
  # if you're going to specify multiple disks, it's important to specify which
  # one is your boot disk. it's not strictly necessary but explicit > implicit
  # and specifying this here will save you down the road if (e.g.) you
  # accidentally add another disk block above this
  disk {
    source_image = "debian-cloud/debian-10"
    boot         = true
  }

  ### IMPORTANT NOTE:
  #
  # There is currently a bug in the API which results in disks being returned
  # out of order. The upshot is that unless the following disks are specified in
  # exactly this order terraform will get confused and the plan will become
  # unstable.
  #
  # Ping bleything@ for a link to the bug.

  # this block will attach local SSDs to the instances
  disk {
    # with a local-ssd disk, you don't have to specify the source image
    disk_type = "local-ssd"

    # but they can only be used as scratch drives
    type = "SCRATCH"

    # and scratch drives are required to be 375gb
    disk_size_gb = 375
  }

  # this block will mount the disk we created above in READ_ONLY mode
  disk {
    source = google_compute_disk.disk.name

    # PDs cannot be multiply mounted in RW mode so explicitly specify RO
    mode = "READ_ONLY"

    # auto_delete defaults to true but this is an invalid value for READ_ONLY
    # disks, so we have to specify this
    auto_delete = false
  }

  # this block will clone the image we created above into 1tb pd-ssd disks and
  # attach those to each instance
  disk {
    source_image = google_compute_image.img.name
    disk_type    = "pd-ssd"
    disk_size_gb = 1000
  }

  # this block will attach a blank 500gb pd-standard
  disk {}

  network_interface {
    network = "default"
  }
}

### Snippet #5: Shielded VM
#
# The docs say "If you choose an image that supports Shielded VM, you can
# optionally change the instance's Shielded VM settings..."
#
# Here's what that looks like in terraform, again based off of the minimal
# example.

resource "google_compute_instance_template" "shielded" {
  name         = "shielded-vm-config"
  machine_type = "n1-standard-1"

  disk {
    source_image = "debian-cloud/debian-10"
  }

  network_interface {
    network = "default"
  }

  # the docs demonstrate how to disable all of these features so that's what I'm
  # showing here. It's worth noting that secure_boot is disabled by default.
  shielded_instance_config {
    enable_secure_boot          = false
    enable_vtpm                 = false
    enable_integrity_monitoring = false
  }
}

### Snippet #6: custom subnet
#
# Specifying the subnet is as easy as adding a `subnet` attribute to the
# `network_interface` block. This snippet demonstrates how you'd look up an
# existing subnet using a data provider and reference it in the template

data "google_compute_subnetwork" "example_subnet" {
  name = "example-subnet"
}

resource "google_compute_instance_template" "custom_subnet" {
  machine_type = "n1-standard-1"

  disk {
    source_image = "debian-cloud/debian-10"
  }

  network_interface {
    network    = "default"
    subnetwork = data.google_compute_subnetwork.example_subnet.name
  }
}
